gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following        
symbols:
  + create

Terraform will perform the following actions:

  # module.vpc.aws_subnet.mysubnet[0] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "DEV"
        }
      + tags_all                                       = {
          + "Environment" = "DEV"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[1] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "DEV"
        }
      + tags_all                                       = {
          + "Environment" = "DEV"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[2] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "DEV"
        }
      + tags_all                                       = {
          + "Environment" = "DEV"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.vpc-assess1 will be created
  + resource "aws_vpc" "vpc-assess1" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "DEV"
          + "Name"        = "myvpc-assess1"
        }
      + tags_all                             = {
          + "Environment" = "DEV"
          + "Name"        = "myvpc-assess1"
        }
    }

Plan: 4 to add, 0 to change, 0 to destroy.
╷
│ Warning: Redundant empty provider block
│
│   on ..\modules\provider.tf line 1:
│    1: provider "aws" {
│
│ Earlier versions of Terraform used empty provider blocks ("proxy provider configurations") for child modules to declare their need to  
│ be passed a provider configuration by their callers. That approach was ambiguous and is now deprecated.
│
│ If you control this module, you can migrate to the new declaration syntax by removing all of the empty provider "aws" blocks and then  
│ adding or updating an entry like the following to the required_providers block of module.vpc:
│     aws = {
│       source = "hashicorp/aws"
│     }
╵

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform 
apply" now.

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:        

  # module.vpc.aws_subnet.mysubnet[0] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "DEV"
        }
      + tags_all                                       = {
          + "Environment" = "DEV"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[1] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "DEV"
        }
      + tags_all                                       = {
          + "Environment" = "DEV"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[2] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "DEV"
        }
      + tags_all                                       = {
          + "Environment" = "DEV"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.vpc-assess1 will be created
  + resource "aws_vpc" "vpc-assess1" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "DEV"
          + "Name"        = "myvpc-assess1"
        }
      + tags_all                             = {
          + "Environment" = "DEV"
          + "Name"        = "myvpc-assess1"
        }
    }

Plan: 4 to add, 0 to change, 0 to destroy.
module.vpc.aws_vpc.vpc-assess1: Creating...
module.vpc.aws_vpc.vpc-assess1: Still creating... [10s elapsed]
module.vpc.aws_vpc.vpc-assess1: Creation complete after 16s [id=vpc-03e4d5dd609c466b7]
module.vpc.aws_subnet.mysubnet[1]: Creating...
module.vpc.aws_subnet.mysubnet[2]: Creating...
module.vpc.aws_subnet.mysubnet[0]: Creating...
module.vpc.aws_subnet.mysubnet[1]: Creation complete after 2s [id=subnet-0d9d6e0e9b4eb4dbf]
module.vpc.aws_subnet.mysubnet[0]: Creation complete after 2s [id=subnet-0e67958afd385320d]
module.vpc.aws_subnet.mysubnet[2]: Creation complete after 2s [id=subnet-090ce6c913bbd7b7c]
╷
│ Warning: Redundant empty provider block
│
│   on ..\modules\provider.tf line 1:
│    1: provider "aws" {
│
│ Earlier versions of Terraform used empty provider blocks ("proxy provider configurations") for child modules to declare their need to  
│ be passed a provider configuration by their callers. That approach was ambiguous and is now deprecated.
│
│ If you control this module, you can migrate to the new declaration syntax by removing all of the empty provider "aws" blocks and then  
│ adding or updating an entry like the following to the required_providers block of module.vpc:
│     aws = {
│       source = "hashicorp/aws"
│     }
╵

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform destroy -auto-approve
module.vpc.aws_vpc.vpc-assess1: Refreshing state... [id=vpc-03e4d5dd609c466b7]
module.vpc.aws_subnet.mysubnet[1]: Refreshing state... [id=subnet-0d9d6e0e9b4eb4dbf]
module.vpc.aws_subnet.mysubnet[0]: Refreshing state... [id=subnet-0e67958afd385320d]
module.vpc.aws_subnet.mysubnet[2]: Refreshing state... [id=subnet-090ce6c913bbd7b7c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following        
symbols:
  - destroy

Terraform will perform the following actions:

  # module.vpc.aws_subnet.mysubnet[0] will be destroyed
  - resource "aws_subnet" "mysubnet" {
      - arn                                            = "arn:aws:ec2:us-east-1:742920196377:subnet/subnet-0e67958afd385320d" -> null    
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1a" -> null
      - availability_zone_id                           = "use1-az2" -> null
      - cidr_block                                     = "10.0.0.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0e67958afd385320d" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "742920196377" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "DEV"
        } -> null
      - tags_all                                       = {
          - "Environment" = "DEV"
        } -> null
      - vpc_id                                         = "vpc-03e4d5dd609c466b7" -> null
    }

  # module.vpc.aws_subnet.mysubnet[1] will be destroyed
  - resource "aws_subnet" "mysubnet" {
      - arn                                            = "arn:aws:ec2:us-east-1:742920196377:subnet/subnet-0d9d6e0e9b4eb4dbf" -> null    
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1b" -> null
      - availability_zone_id                           = "use1-az4" -> null
      - cidr_block                                     = "10.0.1.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0d9d6e0e9b4eb4dbf" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "742920196377" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "DEV"
        } -> null
      - tags_all                                       = {
          - "Environment" = "DEV"
        } -> null
      - vpc_id                                         = "vpc-03e4d5dd609c466b7" -> null
    }

  # module.vpc.aws_subnet.mysubnet[2] will be destroyed
  - resource "aws_subnet" "mysubnet" {
      - arn                                            = "arn:aws:ec2:us-east-1:742920196377:subnet/subnet-090ce6c913bbd7b7c" -> null    
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1c" -> null
      - availability_zone_id                           = "use1-az6" -> null
      - cidr_block                                     = "10.0.2.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-090ce6c913bbd7b7c" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "742920196377" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "DEV"
        } -> null
      - tags_all                                       = {
          - "Environment" = "DEV"
        } -> null
      - vpc_id                                         = "vpc-03e4d5dd609c466b7" -> null
    }

  # module.vpc.aws_vpc.vpc-assess1 will be destroyed
  - resource "aws_vpc" "vpc-assess1" {
      - arn                                  = "arn:aws:ec2:us-east-1:742920196377:vpc/vpc-03e4d5dd609c466b7" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.0.0.0/16" -> null
      - default_network_acl_id               = "acl-0e1e1b05de439bf50" -> null
      - default_route_table_id               = "rtb-08abfc20674b7f989" -> null
      - default_security_group_id            = "sg-064821b032dc80cf3" -> null
      - dhcp_options_id                      = "dopt-073bd3f9217605886" -> null
      - enable_dns_hostnames                 = true -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-03e4d5dd609c466b7" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-08abfc20674b7f989" -> null
      - owner_id                             = "742920196377" -> null
      - tags                                 = {
          - "Environment" = "DEV"
          - "Name"        = "myvpc-assess1"
        } -> null
      - tags_all                             = {
          - "Environment" = "DEV"
          - "Name"        = "myvpc-assess1"
        } -> null
    }

Plan: 0 to add, 0 to change, 4 to destroy.
module.vpc.aws_subnet.mysubnet[0]: Destroying... [id=subnet-0e67958afd385320d]
module.vpc.aws_subnet.mysubnet[1]: Destroying... [id=subnet-0d9d6e0e9b4eb4dbf]
module.vpc.aws_subnet.mysubnet[2]: Destroying... [id=subnet-090ce6c913bbd7b7c]
module.vpc.aws_subnet.mysubnet[1]: Destruction complete after 2s
module.vpc.aws_subnet.mysubnet[2]: Destruction complete after 2s
module.vpc.aws_subnet.mysubnet[0]: Destruction complete after 2s
module.vpc.aws_vpc.vpc-assess1: Destroying... [id=vpc-03e4d5dd609c466b7]
module.vpc.aws_vpc.vpc-assess1: Destruction complete after 2s
╷
│ Warning: Redundant empty provider block
│
│   on ..\modules\provider.tf line 1:
│    1: provider "aws" {
│
│ Earlier versions of Terraform used empty provider blocks ("proxy provider configurations") for child modules to declare their need to  
│ be passed a provider configuration by their callers. That approach was ambiguous and is now deprecated.
│
│ If you control this module, you can migrate to the new declaration syntax by removing all of the empty provider "aws" blocks and then  
│ adding or updating an entry like the following to the required_providers block of module.vpc:
│     aws = {
│       source = "hashicorp/aws"
│     }
╵

Destroy complete! Resources: 4 destroyed.

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform workspace select prod
Switched to workspace "prod".

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following        
symbols:
  + create

Terraform will perform the following actions:

  # module.vpc.aws_subnet.mysubnet[0] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "PROD"
        }
      + tags_all                                       = {
          + "Environment" = "PROD"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[1] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "PROD"
        }
      + tags_all                                       = {
          + "Environment" = "PROD"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[2] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "PROD"
        }
      + tags_all                                       = {
          + "Environment" = "PROD"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.vpc-assess1 will be created
  + resource "aws_vpc" "vpc-assess1" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "PROD"
          + "Name"        = "myvpc-assess1"
        }
      + tags_all                             = {
          + "Environment" = "PROD"
          + "Name"        = "myvpc-assess1"
        }
    }

Plan: 4 to add, 0 to change, 0 to destroy.
╷
│ Warning: Redundant empty provider block
│
│   on ..\modules\provider.tf line 1:
│    1: provider "aws" {
│
│ Earlier versions of Terraform used empty provider blocks ("proxy provider configurations") for child modules to declare their need to  
│ be passed a provider configuration by their callers. That approach was ambiguous and is now deprecated.
│
│ If you control this module, you can migrate to the new declaration syntax by removing all of the empty provider "aws" blocks and then  
│ adding or updating an entry like the following to the required_providers block of module.vpc:
│     aws = {
│       source = "hashicorp/aws"
│     }
╵

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform 
apply" now.

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following        
symbols:
  + create

Terraform will perform the following actions:

  # module.vpc.aws_subnet.mysubnet[0] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "PROD"
        }
      + tags_all                                       = {
          + "Environment" = "PROD"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[1] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "PROD"
        }
      + tags_all                                       = {
          + "Environment" = "PROD"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.mysubnet[2] will be created
  + resource "aws_subnet" "mysubnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "PROD"
        }
      + tags_all                                       = {
          + "Environment" = "PROD"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.vpc-assess1 will be created
  + resource "aws_vpc" "vpc-assess1" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "PROD"
          + "Name"        = "myvpc-assess1"
        }
      + tags_all                             = {
          + "Environment" = "PROD"
          + "Name"        = "myvpc-assess1"
        }
    }

Plan: 4 to add, 0 to change, 0 to destroy.
module.vpc.aws_vpc.vpc-assess1: Creating...
module.vpc.aws_vpc.vpc-assess1: Still creating... [10s elapsed]
module.vpc.aws_vpc.vpc-assess1: Creation complete after 15s [id=vpc-06cda7db5fa7a268c]
module.vpc.aws_subnet.mysubnet[0]: Creating...
module.vpc.aws_subnet.mysubnet[2]: Creating...
module.vpc.aws_subnet.mysubnet[1]: Creating...
module.vpc.aws_subnet.mysubnet[2]: Creation complete after 2s [id=subnet-00ac1a60fb39fb5bb]
module.vpc.aws_subnet.mysubnet[1]: Creation complete after 2s [id=subnet-07daeea07924d1cfe]
module.vpc.aws_subnet.mysubnet[0]: Creation complete after 2s [id=subnet-084d1a33e65e13278]
╷
│ Warning: Redundant empty provider block
│
│   on ..\modules\provider.tf line 1:
│    1: provider "aws" {
│
│ Earlier versions of Terraform used empty provider blocks ("proxy provider configurations") for child modules to declare their need to  
│ be passed a provider configuration by their callers. That approach was ambiguous and is now deprecated.
│
│ If you control this module, you can migrate to the new declaration syntax by removing all of the empty provider "aws" blocks and then  
│ adding or updating an entry like the following to the required_providers block of module.vpc:
│     aws = {
│       source = "hashicorp/aws"
│     }
╵

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform destroy -auto-approve
module.vpc.aws_vpc.vpc-assess1: Refreshing state... [id=vpc-06cda7db5fa7a268c]
module.vpc.aws_subnet.mysubnet[2]: Refreshing state... [id=subnet-00ac1a60fb39fb5bb]
module.vpc.aws_subnet.mysubnet[0]: Refreshing state... [id=subnet-084d1a33e65e13278]
module.vpc.aws_subnet.mysubnet[1]: Refreshing state... [id=subnet-07daeea07924d1cfe]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following        
symbols:
  - destroy

Terraform will perform the following actions:

  # module.vpc.aws_subnet.mysubnet[0] will be destroyed
  - resource "aws_subnet" "mysubnet" {
      - arn                                            = "arn:aws:ec2:us-east-1:742920196377:subnet/subnet-084d1a33e65e13278" -> null    
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1a" -> null
      - availability_zone_id                           = "use1-az2" -> null
      - cidr_block                                     = "10.0.0.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-084d1a33e65e13278" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "742920196377" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "PROD"
        } -> null
      - tags_all                                       = {
          - "Environment" = "PROD"
        } -> null
      - vpc_id                                         = "vpc-06cda7db5fa7a268c" -> null
    }

  # module.vpc.aws_subnet.mysubnet[1] will be destroyed
  - resource "aws_subnet" "mysubnet" {
      - arn                                            = "arn:aws:ec2:us-east-1:742920196377:subnet/subnet-07daeea07924d1cfe" -> null    
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1b" -> null
      - availability_zone_id                           = "use1-az4" -> null
      - cidr_block                                     = "10.0.1.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-07daeea07924d1cfe" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "742920196377" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "PROD"
        } -> null
      - tags_all                                       = {
          - "Environment" = "PROD"
        } -> null
      - vpc_id                                         = "vpc-06cda7db5fa7a268c" -> null
    }

  # module.vpc.aws_subnet.mysubnet[2] will be destroyed
  - resource "aws_subnet" "mysubnet" {
      - arn                                            = "arn:aws:ec2:us-east-1:742920196377:subnet/subnet-00ac1a60fb39fb5bb" -> null    
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1c" -> null
      - availability_zone_id                           = "use1-az6" -> null
      - cidr_block                                     = "10.0.2.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-00ac1a60fb39fb5bb" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "742920196377" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "PROD"
        } -> null
      - tags_all                                       = {
          - "Environment" = "PROD"
        } -> null
      - vpc_id                                         = "vpc-06cda7db5fa7a268c" -> null
    }

  # module.vpc.aws_vpc.vpc-assess1 will be destroyed
  - resource "aws_vpc" "vpc-assess1" {
      - arn                                  = "arn:aws:ec2:us-east-1:742920196377:vpc/vpc-06cda7db5fa7a268c" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.0.0.0/16" -> null
      - default_network_acl_id               = "acl-0d85d9f1ea4a49cb7" -> null
      - default_route_table_id               = "rtb-09921dd4a2ce813f9" -> null
      - default_security_group_id            = "sg-0a42009674db2f08f" -> null
      - dhcp_options_id                      = "dopt-073bd3f9217605886" -> null
      - enable_dns_hostnames                 = true -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-06cda7db5fa7a268c" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-09921dd4a2ce813f9" -> null
      - owner_id                             = "742920196377" -> null
      - tags                                 = {
          - "Environment" = "PROD"
          - "Name"        = "myvpc-assess1"
        } -> null
      - tags_all                             = {
          - "Environment" = "PROD"
          - "Name"        = "myvpc-assess1"
        } -> null
    }

Plan: 0 to add, 0 to change, 4 to destroy.
module.vpc.aws_subnet.mysubnet[1]: Destroying... [id=subnet-07daeea07924d1cfe]
module.vpc.aws_subnet.mysubnet[2]: Destroying... [id=subnet-00ac1a60fb39fb5bb]
module.vpc.aws_subnet.mysubnet[0]: Destroying... [id=subnet-084d1a33e65e13278]
module.vpc.aws_subnet.mysubnet[2]: Destruction complete after 1s
module.vpc.aws_subnet.mysubnet[1]: Destruction complete after 2s
module.vpc.aws_subnet.mysubnet[0]: Destruction complete after 2s
module.vpc.aws_vpc.vpc-assess1: Destroying... [id=vpc-06cda7db5fa7a268c]
module.vpc.aws_vpc.vpc-assess1: Destruction complete after 1s
╷
│ Warning: Redundant empty provider block
│
│   on ..\modules\provider.tf line 1:
│    1: provider "aws" {
│
│ Earlier versions of Terraform used empty provider blocks ("proxy provider configurations") for child modules to declare their need to  
│ be passed a provider configuration by their callers. That approach was ambiguous and is now deprecated.
│
│ If you control this module, you can migrate to the new declaration syntax by removing all of the empty provider "aws" blocks and then  
│ adding or updating an entry like the following to the required_providers block of module.vpc:
│     aws = {
│       source = "hashicorp/aws"
│     }
╵

Destroy complete! Resources: 4 destroyed.

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform workspace delete dev
Deleted workspace "dev"!

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform workspace select default
Switched to workspace "default".

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform workspace delete prod
Deleted workspace "prod"!

gowkumar@WKWZTa8lo6wEyUh MINGW64 ~/Documents/Terraform_Batch/day5/projects (master)
$ terraform workspace list
* default

